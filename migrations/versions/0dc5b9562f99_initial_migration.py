# """Initial migration.

# Revision ID: 0dc5b9562f99
# Revises: 
# Create Date: 2024-07-17 09:41:10.673897

# """
# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision = '0dc5b9562f99'
# down_revision = None
# branch_labels = None
# depends_on = None


# def upgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('attendance', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('timeIn', sa.DateTime(), nullable=True))
#         batch_op.add_column(sa.Column('timeOut', sa.DateTime(), nullable=True))
#         batch_op.drop_column('timestamp')

#     with op.batch_alter_table('user', schema=None) as batch_op:
#         batch_op.alter_column('category',
#                existing_type=sa.VARCHAR(length=50),
#                type_=sa.String(length=20),
#                existing_nullable=False)

#     # ### end Alembic commands ###


# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('user', schema=None) as batch_op:
#         batch_op.alter_column('category',
#                existing_type=sa.String(length=20),
#                type_=sa.VARCHAR(length=50),
#                existing_nullable=False)

#     with op.batch_alter_table('attendance', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('timestamp', sa.DATETIME(), nullable=True))
#         batch_op.drop_column('timeOut')
#         batch_op.drop_column('timeIn')

#     # ### end Alembic commands ###


"""Initial migration.

Revision ID: 0dc5b9562f99
Revises: 
Create Date: 2024-07-17 09:41:10.673897

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0dc5b9562f99'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Add columns to attendance table
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.add_column(sa.Column('timeIn', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('timeOut', sa.DateTime(), nullable=True))
        # If 'timestamp' column exists and needs to be dropped
        # batch_op.drop_column('timestamp')

    # Modify column in user table (example modification)
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('category',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=False)

    # Optional: If dropping 'timestamp', add drop_column operation here
    # with op.batch_alter_table('attendance', schema=None) as batch_op:
    #     batch_op.drop_column('timestamp')


def downgrade():
    # Downgrade operations if needed, reversing changes made in 'upgrade()'
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('category',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.add_column(sa.Column('timestamp', sa.DATETIME(), nullable=True))
        batch_op.drop_column('timeOut')
        batch_op.drop_column('timeIn')
        #making user id nullable again
        batch_op.alter_column('user_id',
                              existing_type=sa.Integer(),
                              nullable=False)

    # If 'timestamp' was dropped in 'upgrade()', add it back in 'downgrade()'
    # with op.batch_alter_table('attendance', schema=None) as batch_op:
    #     batch_op.add_column(sa.Column('timestamp', sa.DATETIME(), nullable=True))

